package demo.camt054.to.mt9xx;

import com.prowidesoftware.swift.model.SwiftMessage;
import com.prowidesoftware.swift.model.field.Field20;
import com.prowidesoftware.swift.model.field.Field21;
import com.prowidesoftware.swift.model.field.Field25;
import com.prowidesoftware.swift.model.field.Field32A;
import com.prowidesoftware.swift.model.mt.mt9xx.MT900;
import com.prowidesoftware.swift.model.mt.mt9xx.MT910;
import com.prowidesoftware.swift.model.mx.MxCamt05400108; // adjust version to your camt.054 variant
import com.prowidesoftware.swift.model.mx.dic.AccountNotification14;
import com.prowidesoftware.swift.model.mx.dic.ReportEntry10;

import javax.xml.bind.JAXBException;
import java.io.IOException;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.UUID;

public class Camt054ToMT9xx {

    public static void main(String[] args) throws IOException, JAXBException {
        if (args.length < 3) {
            System.err.println("Usage: java Camt054ToMT9xx <camt054.xml> <senderBIC> <receiverBIC>");
            System.exit(1);
        }

        String xml = Files.readString(Paths.get(args[0]));
        String senderBic = args[1];
        String receiverBic = args[2];

        // Parse camt.054 using JAXB class
        MxCamt05400108 camt = MxCamt05400108.parse(xml);

        for (AccountNotification14 ntf : camt.getBkToCstmrDbtCdtNtfctn().getNtfctn()) {
            String account = null;
            if (ntf.getAcct() != null && ntf.getAcct().getId() != null) {
                if (ntf.getAcct().getId().getIBAN() != null) {
                    account = ntf.getAcct().getId().getIBAN();
                } else if (ntf.getAcct().getId().getOthr() != null) {
                    account = ntf.getAcct().getId().getOthr().getId();
                }
            }

            for (ReportEntry10 entry : ntf.getNtry()) {
                String indicator = entry.getCdtDbtInd().value(); // DBIT or CRDT
                String amount = entry.getAmt().getValue().toPlainString();
                String ccy = entry.getAmt().getCcy();
                String entryRef = entry.getNtryRef() != null ? entry.getNtryRef() : UUID.randomUUID().toString();
                String relRef = entry.getAcctSvcrRef();

                // Value date
                LocalDate valDate = null;
                if (entry.getValDt() != null) {
                    if (entry.getValDt().getDt() != null) {
                        valDate = entry.getValDt().getDt();
                    } else if (entry.getValDt().getDtTm() != null) {
                        valDate = entry.getValDt().getDtTm().toLocalDate();
                    }
                }
                if (valDate == null) {
                    valDate = LocalDate.now();
                }

                String yymmdd = valDate.format(DateTimeFormatter.ofPattern("yyMMdd"));
                String mtAmount = toMtAmount(amount);

                SwiftMessage mt;
                if ("DBIT".equalsIgnoreCase(indicator)) {
                    mt = buildMT900(senderBic, receiverBic, account, entryRef, relRef, yymmdd, ccy, mtAmount);
                } else {
                    mt = buildMT910(senderBic, receiverBic, account, entryRef, relRef, yymmdd, ccy, mtAmount);
                }

                System.out.println("---- Generated MT ----");
                System.out.println(mt.toString());
            }
        }
    }

    private static SwiftMessage buildMT900(String sender, String receiver,
                                           String account, String trn20, String relref21,
                                           String yymmdd, String ccy, String amount) {
        MT900 mt = new MT900();
        mt.setSender(sender);
        mt.setReceiver(receiver);

        mt.addField(new Field20(trn20));
        if (relref21 != null) {
            mt.addField(new Field21(relref21));
        }
        if (account != null) {
            mt.addField(new Field25(account));
        }
        mt.addField(new Field32A(yymmdd, ccy, amount));

        return mt.getSwiftMessage();
    }

    private static SwiftMessage buildMT910(String sender, String receiver,
                                           String account, String trn20, String relref21,
                                           String yymmdd, String ccy, String amount) {
        MT910 mt = new MT910();
        mt.setSender(sender);
        mt.setReceiver(receiver);

        mt.addField(new Field20(trn20));
        if (relref21 != null) {
            mt.addField(new Field21(relref21));
        }
        if (account != null) {
            mt.addField(new Field25(account));
        }
        mt.addField(new Field32A(yymmdd, ccy, amount));

        return mt.getSwiftMessage();
    }

    private static String toMtAmount(String amt) {
        BigDecimal bd = new BigDecimal(amt.trim());
        String s = bd.stripTrailingZeros().toPlainString();
        return s.replace('.', ','); // MT format uses comma as decimal separator
    }
}
